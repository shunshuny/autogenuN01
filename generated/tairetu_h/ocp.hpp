// This file was automatically generated by autogenu-jupyter (https://github.com/mayataka/autogenu-jupyter). 
// The autogenu-jupyter copyright holders make no ownership claim of its contents. 

#ifndef CGMRES__OCP_TAIRETU_H_HPP_ 
#define CGMRES__OCP_TAIRETU_H_HPP_ 
 
#define _USE_MATH_DEFINES

#include <cmath>
#include <array>
#include <iostream>

#include "cgmres/types.hpp"
#include "cgmres/detail/macros.hpp"

namespace cgmres {

/// 
/// @class OCP_tairetu_h
/// @brief Definition of the optimal control problem (OCP) of tairetu_h.
/// 
class OCP_tairetu_h { 
public:
  ///
  /// @brief Dimension of the state. 
  ///
  static constexpr int nx = 9;
 
  ///
  /// @brief Dimension of the control input. 
  ///
  static constexpr int nu = 6;
 
  ///
  /// @brief Dimension of the equality constraints. 
  ///
  static constexpr int nc = 1;
 
  ///
  /// @brief Dimension of the Fischer-Burmeister function (already counded in nc). 
  ///
  static constexpr int nh = 1;
 
  ///
  /// @brief Dimension of the concatenation of the control input and equality constraints. 
  ///
  static constexpr int nuc = nu + nc;

  ///
  /// @brief Dimension of the bound constraints on the control input. 
  ///
  static constexpr int nub = 0;

  double q11 = 100;
  double q12 = 100;
  double q21 = 100;
  double q22 = 100;
  double q31 = 100;
  double q32 = 100;
  double r11 = 100;
  double r12 = 30;
  double r21 = 100;
  double r22 = 30;
  double r31 = 100;
  double r32 = 30;
  double sf11 = 10;
  double sf12 = 10;
  double sf21 = 1;
  double sf22 = 1;
  double sf31 = 1;
  double sf32 = 1;
  double D = 1;
  double Length = 0.5;
  double A = 2;


  std::array<double, nh> fb_eps = {1};

  void disp(std::ostream& os) const {
    os << "OCP_tairetu_h:" << std::endl;
    os << "  nx:  " << nx << std::endl;
    os << "  nu:  " << nu << std::endl;
    os << "  nc:  " << nc << std::endl;
    os << "  nh:  " << nh << std::endl;
    os << "  nuc: " << nuc << std::endl;
    os << "  nub: " << nub << std::endl;
    os << std::endl;
    os << "  q11: " << q11 << std::endl;
    os << "  q12: " << q12 << std::endl;
    os << "  q21: " << q21 << std::endl;
    os << "  q22: " << q22 << std::endl;
    os << "  q31: " << q31 << std::endl;
    os << "  q32: " << q32 << std::endl;
    os << "  r11: " << r11 << std::endl;
    os << "  r12: " << r12 << std::endl;
    os << "  r21: " << r21 << std::endl;
    os << "  r22: " << r22 << std::endl;
    os << "  r31: " << r31 << std::endl;
    os << "  r32: " << r32 << std::endl;
    os << "  sf11: " << sf11 << std::endl;
    os << "  sf12: " << sf12 << std::endl;
    os << "  sf21: " << sf21 << std::endl;
    os << "  sf22: " << sf22 << std::endl;
    os << "  sf31: " << sf31 << std::endl;
    os << "  sf32: " << sf32 << std::endl;
    os << "  D: " << D << std::endl;
    os << "  Length: " << Length << std::endl;
    os << "  A: " << A << std::endl;
    os << std::endl;
    Eigen::IOFormat fmt(4, 0, ", ", "", "[", "]");
    Eigen::IOFormat intfmt(1, 0, ", ", "", "[", "]");
    os << std::endl;
    os << "  fb_eps: " << Map<const VectorX>(fb_eps.data(), fb_eps.size()).transpose().format(fmt) << std::endl;
  }

  friend std::ostream& operator<<(std::ostream& os, const OCP_tairetu_h& ocp) { 
    ocp.disp(os);
    return os;
  }


  ///
  /// @brief Synchrozies the internal parameters of this OCP with the external references.
  /// This method is called at the beginning of each MPC update.
  ///
  void synchronize() {
  }

  ///
  /// @brief Computes the state equation dx = f(t, x, u).
  /// @param[in] t Time.
  /// @param[in] x State.
  /// @param[in] u Control input.
  /// @param[out] dx Evaluated value of the state equation.
  /// @remark This method is intended to be used inside of the cgmres solvers and does not check size of each argument. 
  /// Use the overloaded method if you call this outside of the cgmres solvers. 
  ///
  void eval_f(const double t, const double* x, const double* u, 
              double* dx) const {
    dx[0] = u[0]*cos(x[2]);
    dx[1] = u[0]*sin(x[2]);
    dx[2] = u[0]*tan(u[1])/Length;
    dx[3] = u[2]*cos(x[5]);
    dx[4] = u[2]*sin(x[5]);
    dx[5] = u[2]*tan(u[3])/Length;
    dx[6] = u[4]*cos(x[8]);
    dx[7] = u[4]*sin(x[8]);
    dx[8] = u[4]*tan(u[5])/Length;
 
  }

  ///
  /// @brief Computes the partial derivative of terminal cost with respect to state, 
  /// i.e., phix = dphi/dx(t, x).
  /// @param[in] t Time.
  /// @param[in] x State.
  /// @param[out] phix Evaluated value of the partial derivative of terminal cost.
  /// @remark This method is intended to be used inside of the cgmres solvers and does not check size of each argument. 
  /// Use the overloaded method if you call this outside of the cgmres solvers. 
  ///
  void eval_phix(const double t, const double* x, double* phix) const {
    phix[0] = sf11*(-2*A*t + 2*x[0]) + sf21*(2*x[0] - 2*x[3]);
    phix[1] = sf12*(2*x[1] - 8) + 2*sf22*(-D + sqrt(pow(-x[1] + x[4], 2)))*(x[1] - x[4])*sqrt(pow(-x[1] + x[4], 2))/pow(-x[1] + x[4], 2);
    phix[2] = 0;
    phix[3] = sf21*(-2*x[0] + 2*x[3]) + sf31*(2*x[3] - 2*x[6]);
    phix[4] = 2*sf22*(-D + sqrt(pow(-x[1] + x[4], 2)))*sqrt(pow(-x[1] + x[4], 2))/(-x[1] + x[4]) + 2*sf32*(-D + sqrt(pow(-x[4] + x[7], 2)))*(x[4] - x[7])*sqrt(pow(-x[4] + x[7], 2))/pow(-x[4] + x[7], 2);
    phix[5] = 0;
    phix[6] = sf31*(-2*x[3] + 2*x[6]);
    phix[7] = 2*sf32*(-D + sqrt(pow(-x[4] + x[7], 2)))*sqrt(pow(-x[4] + x[7], 2))/(-x[4] + x[7]);
    phix[8] = 0;
 
  }

  ///
  /// @brief Computes the partial derivative of the Hamiltonian with respect to state, 
  /// i.e., hx = dH/dx(t, x, u, lmd).
  /// @param[in] t Time.
  /// @param[in] x State.
  /// @param[in] u Concatenatin of the control input and Lagrange multiplier with respect to the equality constraints. 
  /// @param[in] lmd Costate. 
  /// @param[out] hx Evaluated value of the partial derivative of the Hamiltonian.
  /// @remark This method is intended to be used inside of the cgmres solvers and does not check size of each argument. 
  /// Use the overloaded method if you call this outside of the cgmres solvers. 
  ///
  void eval_hx(const double t, const double* x, const double* u, 
               const double* lmd, double* hx) const {
    hx[0] = q11*(-2*A*t + 2*x[0]) + q21*(2*x[0] - 2*x[3]);
    hx[1] = q12*(2*x[1] - 8) + 2*q22*(-D + sqrt(pow(-x[1] + x[4], 2)))*(x[1] - x[4])*sqrt(pow(-x[1] + x[4], 2))/pow(-x[1] + x[4], 2);
    hx[2] = -lmd[0]*u[0]*sin(x[2]) + lmd[1]*u[0]*cos(x[2]);
    hx[3] = q21*(-2*x[0] + 2*x[3]) + q31*(2*x[3] - 2*x[6]) + u[6]*(5000 - 100*x[3]);
    hx[4] = 2*q22*(-D + sqrt(pow(-x[1] + x[4], 2)))*sqrt(pow(-x[1] + x[4], 2))/(-x[1] + x[4]) + 2*q32*(-D + sqrt(pow(-x[4] + x[7], 2)))*(x[4] - x[7])*sqrt(pow(-x[4] + x[7], 2))/pow(-x[4] + x[7], 2) + u[6]*(6.4000000000000012 - 2.0000000000000004*x[4]);
    hx[5] = -lmd[3]*u[2]*sin(x[5]) + lmd[4]*u[2]*cos(x[5]);
    hx[6] = q31*(-2*x[3] + 2*x[6]);
    hx[7] = 2*q32*(-D + sqrt(pow(-x[4] + x[7], 2)))*sqrt(pow(-x[4] + x[7], 2))/(-x[4] + x[7]);
    hx[8] = -lmd[6]*u[4]*sin(x[8]) + lmd[7]*u[4]*cos(x[8]);
 
  }

  ///
  /// @brief Computes the partial derivative of the Hamiltonian with respect to control input and the equality constraints, 
  /// i.e., hu = dH/du(t, x, u, lmd).
  /// @param[in] t Time.
  /// @param[in] x State.
  /// @param[in] u Concatenatin of the control input and Lagrange multiplier with respect to the equality constraints. 
  /// @param[in] lmd Costate. 
  /// @param[out] hu Evaluated value of the partial derivative of the Hamiltonian.
  /// @remark This method is intended to be used inside of the cgmres solvers and does not check size of each argument. 
  /// Use the overloaded method if you call this outside of the cgmres solvers. 
  ///
  void eval_hu(const double t, const double* x, const double* u, 
               const double* lmd, double* hu) const {
    hu[0] = lmd[0]*cos(x[2]) + lmd[1]*sin(x[2]) + r11*(-2*A + 2*u[0]) + r21*(2*u[0] - 2*u[2]) + lmd[2]*tan(u[1])/Length;
    hu[1] = 2*r12*u[1] + lmd[2]*u[0]*(pow(tan(u[1]), 2) + 1)/Length;
    hu[2] = lmd[3]*cos(x[5]) + lmd[4]*sin(x[5]) + r21*(-2*u[0] + 2*u[2]) + r31*(2*u[2] - 2*u[4]) + lmd[5]*tan(u[3])/Length;
    hu[3] = 2*r22*u[3] + lmd[5]*u[2]*(pow(tan(u[3]), 2) + 1)/Length;
    hu[4] = lmd[6]*cos(x[8]) + lmd[7]*sin(x[8]) + r31*(-2*u[2] + 2*u[4]) + lmd[8]*tan(u[5])/Length;
    hu[5] = 2*r32*u[5] + lmd[8]*u[4]*(pow(tan(u[5]), 2) + 1)/Length;
    hu[6] = -u[6] - 50*pow(x[3] - 50, 2) - 10.240000000000002*pow(0.3125*x[4] - 1, 2) + sqrt(fb_eps[0] + pow(u[6], 2) + 2500*pow(-pow(x[3] - 50, 2) - 0.20480000000000004*pow(0.3125*x[4] - 1, 2) + 0.00125, 2)) + 0.0625;
 
  }

  ///
  /// @brief Computes the state equation dx = f(t, x, u).
  /// @param[in] t Time.
  /// @param[in] x State. Size must be nx.
  /// @param[in] u Control input. Size must be nu.
  /// @param[out] dx Evaluated value of the state equation. Size must be nx.
  ///
  template <typename VectorType1, typename VectorType2, typename VectorType3>
  void eval_f(const double t, const MatrixBase<VectorType1>& x, 
              const MatrixBase<VectorType2>& u, 
              const MatrixBase<VectorType3>& dx) const {
    if (x.size() != nx) {
      throw std::invalid_argument("[OCP]: x.size() must be " + std::to_string(nx));
    }
    if (u.size() != nu) {
      throw std::invalid_argument("[OCP]: u.size() must be " + std::to_string(nu));
    }
    if (dx.size() != nx) {
      throw std::invalid_argument("[OCP]: dx.size() must be " + std::to_string(nx));
    }
    eval_f(t, x.derived().data(), u.derived().data(), CGMRES_EIGEN_CONST_CAST(VectorType3, dx).data());
  }

  ///
  /// @brief Computes the partial derivative of terminal cost with respect to state, 
  /// i.e., phix = dphi/dx(t, x).
  /// @param[in] t Time.
  /// @param[in] x State. Size must be nx.
  /// @param[out] phix Evaluated value of the partial derivative of terminal cost. Size must be nx.
  ///
  template <typename VectorType1, typename VectorType2>
  void eval_phix(const double t, const MatrixBase<VectorType1>& x, 
                 const MatrixBase<VectorType2>& phix) const {
    if (x.size() != nx) {
      throw std::invalid_argument("[OCP]: x.size() must be " + std::to_string(nx));
    }
    if (phix.size() != nx) {
      throw std::invalid_argument("[OCP]: phix.size() must be " + std::to_string(nx));
    }
    eval_phix(t, x.derived().data(), CGMRES_EIGEN_CONST_CAST(VectorType2, phix).data());
  }

  ///
  /// @brief Computes the partial derivative of the Hamiltonian with respect to the state, 
  /// i.e., hx = dH/dx(t, x, u, lmd).
  /// @param[in] t Time.
  /// @param[in] x State. Size must be nx.
  /// @param[in] uc Concatenatin of the control input and Lagrange multiplier with respect to the equality constraints. Size must be nuc. 
  /// @param[in] lmd Costate.  Size must be nx.
  /// @param[out] hx Evaluated value of the partial derivative of the Hamiltonian. Size must be nx.
  ///
  template <typename VectorType1, typename VectorType2, typename VectorType3, typename VectorType4>
  void eval_hx(const double t, const MatrixBase<VectorType1>& x, 
               const MatrixBase<VectorType2>& uc, 
               const MatrixBase<VectorType3>& lmd, 
               const MatrixBase<VectorType4>& hx) const {
    if (x.size() != nx) {
      throw std::invalid_argument("[OCP]: x.size() must be " + std::to_string(nx));
    }
    if (uc.size() != nuc) {
      throw std::invalid_argument("[OCP]: uc.size() must be " + std::to_string(nuc));
    }
    if (lmd.size() != nx) {
      throw std::invalid_argument("[OCP]: lmd.size() must be " + std::to_string(nx));
    }
    if (hx.size() != nuc) {
      throw std::invalid_argument("[OCP]: hx.size() must be " + std::to_string(nx));
    }
    eval_hx(t, x.derived().data(), uc.derived().data(), lmd.derived().data(), CGMRES_EIGEN_CONST_CAST(VectorType4, hx).data());
  }

  ///
  /// @brief Computes the partial derivative of the Hamiltonian with respect to control input and the equality constraints, 
  /// i.e., hu = dH/du(t, x, u, lmd).
  /// @param[in] t Time.
  /// @param[in] x State. Size must be nx.
  /// @param[in] uc Concatenatin of the control input and Lagrange multiplier with respect to the equality constraints. Size must be nuc. 
  /// @param[in] lmd Costate. Size must be nx. 
  /// @param[out] hu Evaluated value of the partial derivative of the Hamiltonian. Size must be nuc.
  ///
  template <typename VectorType1, typename VectorType2, typename VectorType3, typename VectorType4>
  void eval_hu(const double t, const MatrixBase<VectorType1>& x, 
               const MatrixBase<VectorType2>& uc, 
               const MatrixBase<VectorType3>& lmd, 
               const MatrixBase<VectorType4>& hu) const {
    if (x.size() != nx) {
      throw std::invalid_argument("[OCP]: x.size() must be " + std::to_string(nx));
    }
    if (uc.size() != nuc) {
      throw std::invalid_argument("[OCP]: uc.size() must be " + std::to_string(nuc));
    }
    if (lmd.size() != nx) {
      throw std::invalid_argument("[OCP]: lmd.size() must be " + std::to_string(nx));
    }
    if (hu.size() != nuc) {
      throw std::invalid_argument("[OCP]: hu.size() must be " + std::to_string(nuc));
    }
    eval_hu(t, x.derived().data(), uc.derived().data(), lmd.derived().data(), CGMRES_EIGEN_CONST_CAST(VectorType4, hu).data());
  }

};

} // namespace cgmres

#endif // CGMRES_OCP_HPP_
